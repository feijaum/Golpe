import streamlit as st
import json

# --- Configura√ß√£o da P√°gina ---
# Usamos o layout "wide" para aproveitar melhor o espa√ßo da tela, como no design.
st.set_page_config(
    page_title="Verificador de Golpes com IA",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Fun√ß√µes de Simula√ß√£o dos Agentes de IA ---
# Estas fun√ß√µes simulam o comportamento dos agentes Gemini que definimos no plano.
# Elas nos permitem desenvolver a interface sem fazer chamadas reais √† API.

def call_analyzer_agent(user_input: str) -> dict:
    """
    Simula o Agente 1 (Gemini 1.5 Flash).
    Recebe o input do usu√°rio e retorna uma primeira an√°lise em formato JSON.
    """
    # Apenas para garantir que a fun√ß√£o est√° sendo chamada
    print(f"ANALYZER: Analisando o input: '{user_input[:30]}...'")
    
    # Resposta simulada em formato JSON, como esperado da API
    mock_response = {
        "analise": "O link parece ser uma tentativa de phishing cl√°ssica, usando um senso de urg√™ncia e um link encurtado para esconder o destino real. Foram encontrados relatos de golpes similares usando o nome da empresa 'Supt Scam'.",
        "risco": "Alto",
        "fontes": [
            "https://www.security.com/blog/phishing-report-2024",
            "https://forum.scam-detector.com/t/supt-scam-warning/12345"
        ]
    }
    return mock_response

def call_validator_agent(analysis_from_agent_1: dict) -> str:
    """
    Simula o Agente 2 (Gemini 1.5 Pro).
    Recebe a an√°lise do primeiro agente e retorna o veredito final para o usu√°rio.
    """
    print("VALIDATOR: Validando a an√°lise recebida.")
    
    risco = analysis_from_agent_1.get("risco", "Indeterminado")
    fontes = analysis_from_agent_1.get("fontes", [])
    
    # Monta uma resposta final mais elaborada e amig√°vel para o usu√°rio
    veredito = f"""
    ### Veredito Final da An√°lise
    
    **N√≠vel de Risco Identificado: {risco}**
    
    **An√°lise Detalhada:**
    A an√°lise inicial indica uma forte possibilidade de golpe. O padr√£o identificado √© consistente com t√°ticas de **phishing**, onde criminosos tentam roubar suas informa√ß√µes pessoais (senhas, dados de cart√£o) se passando por uma empresa leg√≠tima.
    
    **Recomenda√ß√µes de Seguran√ßa:**
    1.  **N√ÉO CLIQUE** em nenhum link presente na mensagem.
    2.  **N√ÉO FORNE√áA** nenhuma informa√ß√£o pessoal ou financeira.
    3.  **BLOQUEIE** o remetente e **APAGUE** a mensagem imediatamente.
    4.  Se a mensagem se passar por uma empresa que voc√™ conhece, entre em contato com a empresa atrav√©s de seus canais oficiais (site ou app) para verificar a legitimidade.
    
    **Fontes Consultadas pelo Analista:**
    """
    for fonte in fontes:
        veredito += f"- `{fonte}`\n"
        
    return veredito

# --- CSS e HTML Personalizado ---
# Aqui injetamos o estilo (CSS) para replicar o design da imagem de refer√™ncia.
# Usamos classes para estruturar o layout (sidebar, main-content) e estilizar os elementos.
def load_css():
    st.markdown("""
    <style>
        /* Remove o padding padr√£o do Streamlit para controle total */
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            padding-left: 2rem;
            padding-right: 2rem;
        }

        /* Oculta o menu de hamb√∫rguer e o cabe√ßalho do Streamlit */
        #MainMenu, header {
            visibility: hidden;
        }

        /* Container principal para o layout de duas colunas */
        .app-container {
            display: flex;
            height: 80vh; /* Altura da viewport */
            width: 100%;
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            overflow: hidden;
        }

        /* Sidebar (Coluna da Esquerda) */
        .sidebar {
            width: 25%;
            background-color: #1e293b; /* Azul escuro do design */
            color: #ffffff;
            padding: 2rem;
            display: flex;
            flex-direction: column;
        }
        .sidebar h1 {
            font-size: 2rem;
            font-weight: bold;
            display: flex;
            align-items: center;
        }
        .sidebar h2 {
            font-size: 1.5rem;
            margin-top: 2rem;
            color: #e2e8f0;
        }
         .sidebar .call-to-action {
            margin-top: auto; /* Empurra o bot√£o para o final */
            background-color: #4f46e5; /* Roxo/azul do bot√£o */
            color: white;
            border: none;
            padding: 1rem;
            width: 100%;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .sidebar .call-to-action:hover {
            background-color: #4338ca;
        }

        /* Conte√∫do Principal (Coluna da Direita) */
        .main-content {
            width: 75%;
            padding: 2rem;
            background-color: #f8fafc; /* Fundo cinza claro */
            overflow-y: auto; /* Permite scroll se o conte√∫do for grande */
        }
        
        /* Estilo para a √°rea de resposta */
        .response-area {
            margin-top: 2rem;
            padding: 1.5rem;
            background-color: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 15px;
            min-height: 300px;
        }
        
        /* Estilo para o bot√£o de verifica√ß√£o */
        .stButton>button {
            background-color: #4f46e5;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: bold;
            border: none;
            width: 100%;
        }

    </style>
    """, unsafe_allow_html=True)

# --- Interface Principal do Aplicativo ---

load_css()

# Usamos st.empty() para criar containers que podemos preencher com o nosso HTML
app_container = st.empty()

with app_container.container():
    st.markdown("""
    <div class="app-container">
        <div class="sidebar">
            <h1>üõ°Ô∏è Verificador</h1>
            <h2>An√°lise Inteligente<br>de Golpes na Internet</h2>
            <!-- Placeholder para outros elementos da sidebar -->
            <button class="call-to-action">Aprenda a se Proteger</button>
        </div>
        
        <div class="main-content" id="main-content-area">
            <!-- O conte√∫do do Streamlit ir√° aqui -->
        </div>
    </div>
    """, unsafe_allow_html=True)

# Agora, inserimos os componentes do Streamlit dentro da div 'main-content'
# Isso √© um truque, pois o Streamlit n√£o permite aninhar componentes diretamente em HTML.
# A abordagem correta √© criar o layout com HTML e preencher as √°reas com colunas do Streamlit.
# Para este MVP, vamos colocar os controles diretamente abaixo do layout HTML.

st.markdown("### Verificador de Conte√∫do Suspeito")
st.write("Cole um texto, mensagem ou link abaixo para iniciar a an√°lise.")

# Inputs do usu√°rio
user_input = st.text_area(
    "Conte√∫do a ser analisado:", 
    height=150, 
    placeholder="Ex: Recebi um SMS dizendo que ganhei um pr√™mio, com o link bit.ly/premio123. √â confi√°vel?"
)

submit_button = st.button("Verificar Agora")

# Container para a resposta
response_container = st.container()

if 'analysis_result' not in st.session_state:
    st.session_state.analysis_result = None

if submit_button and user_input:
    with st.spinner("Analisando com o Agente 1 (Flash)..."):
        analysis = call_analyzer_agent(user_input)
    
    with st.spinner("Validando an√°lise com o Agente 2 (Pro)..."):
        st.session_state.analysis_result = call_validator_agent(analysis)

# Exibe o resultado se ele existir no estado da sess√£o
if st.session_state.analysis_result:
    with response_container:
        st.markdown('<div class="response-area">', unsafe_allow_html=True)
        st.markdown(st.session_state.analysis_result, unsafe_allow_html=False)
        st.markdown('</div>', unsafe_allow_html=True)


